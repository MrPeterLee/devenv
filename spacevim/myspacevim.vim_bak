function! myspacevim#before() abort
  " Script that dominates SpaceVim settings
  augroup custom_autocmd
    au!
    " au FileType text,md,markdown setlocal textwidth=78
    " au FileType text,md,markdown setlocal wrap
    au BufRead,BufNewFile *.txt,*.tex,*.md set wrap linebreak nolist textwidth=0 wrapmargin=0
  augroup END

  " Fix up SpaceVim indentation default 
  let g:spacevim_default_indent = 4
  let g:spacevim_expand_tab =0
endfunction

function! myspacevim#after() abort
  " SpaceVim settings dominates the below settings
 
  " =========== Vim-Tmux Navigator Settings =========== 
  " let g:tmux_navigator_no_mappings = 1
  " Move between Vim windows and Tmux panes
  " - It requires the corresponding configuration into Tmux.
  " - Check it at my .tmux.conf from my dotfiles repository.
  " - URL: https://github.com/gerardbm/dotfiles/blob/master/tmux/.tmux.conf
  " - Plugin required: https://github.com/christoomey/vim-tmux-navigator
  " nnoremap <silent> <M-h> :TmuxNavigateLeft<CR>
  " nnoremap <silent> <M-j> :TmuxNavigateDown<CR>
  " nnoremap <silent> <M-k> :TmuxNavigateUp<CR>
  " nnoremap <silent> <M-l> :TmuxNavigateRight<CR>

  " =========== Python Linter Settings =========== 
  " Linter - Black
  let g:neoformat_python_black = {
    \ 'exe': 'black',
    \ 'stdin': 1,
    \ 'args': ['-q', '-'],
    \ }
  let g:neoformat_enabled_python = ['black']

  " Pydocstring
  let g:pydocstring_doq_path = /opt/anaconda/bin/doq
  let g:pydocstring_formatter = 'sphinx'

  " =========== Github Settings =========== 
  " func! myspacevim#before() abort
  let g:github_dashboard = { 'username': 'mrpeterlee', 'password': $github_access_token }
  let g:gista#client#default_username = 'mrpeterlee'

  "set clipboard=unnamed
  " Copy text into the remote clipboard
  " vnoremap <Leader>y "+y<Esc>
  vnoremap <Leader>y :'<,'>write! >> /tmp/vim_clipboard.tempfile <enter> <bar> : !transfer_tempfile_to_local_clipboard <enter> <bar> : !rm -f /tmp/vim_clipboard.tempfile <enter>
  nnoremap <Leader>p "+p
  

  " Support makefiles as tasks
  function! s:make_tasks() abort
      if filereadable('Makefile')
          let subcmd = filter(readfile('Makefile', ''), "v:val=~#'^.PHONY'")
          if !empty(subcmd)
              let commands = split(subcmd[0])[1:]
              let conf = {}
              for cmd in commands
                  call extend(conf, {
                              \ cmd : {
                              \ 'command': 'make',
                              \ 'args' : [cmd],
                              \ 'isDetected' : 1,
                              \ 'detectedName' : 'make:'
                              \ }
                              \ })
              endfor
              return conf
          else
              return {}
          endif
      else
          return {}
      endif
  endfunction
  call SpaceVim#plugins#tasks#reg_provider(funcref('s:make_tasks'))

endfunction

